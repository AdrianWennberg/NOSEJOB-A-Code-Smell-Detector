import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FeedbackMainService } from '@app/common/services/feedback-main.service';
import { UserProject } from '@app/model/project.model';
import { Subscription } from 'rxjs';
import { defined } from '@app/helpers';
import { SurveyLayoutService } from '@app/common/services/survey-layout.service';
import { SurveyLayout } from '@app/model/survey-layout.model';
import { SurveyLayoutModelType } from '@app/enums/survey-layout-model-type.enum';

@Component({
  selector: 'app-feedback-navigation',
  templateUrl: './feedback-navigation.component.html',
  styleUrls: ['./feedback-navigation.component.scss']
})
export class FeedbackNavigationComponent implements OnDestroy, OnInit {
  @Input() feedbackService: FeedbackMainService;
  public surveyLayout: SurveyLayout;
  public currentStepIndex: number;
  public finalized = false;
  public headingText: string = undefined;
  public userProject$: Subscription;
  public routeParams$: Subscription;
  public routeQueries$: Subscription;
  public userProject: UserProject;
  public nextNavLink: any[];
  public prevNavLink: any[];
  public isNextNavLinkValid: boolean;
  public isPrevNavLinkValid: boolean;
  public prevStepIndexParam: { step?: string, preview?: boolean } = {};
  public nextStepIndexParam: { step?: string, preview?: boolean } = {};

  constructor(
    public surveyLayoutService: SurveyLayoutService,
    public activatedRoute: ActivatedRoute,
    public router: Router
  ) { }

  ngOnInit() {
    this.maintainFeedbackNavigation();
  }

  maintainFeedbackNavigation() {
    this.userProject$ = this.feedbackService.getUserProject()
      .subscribe((userProject: UserProject) => {
        this.userProject = userProject;
        this.getSurveyLayout();
        this.setupPage();
      });
    this.feedbackService.emitNextUserProjectObservable();
  }

  getSurveyLayout() {
    this.surveyLayoutService.getById(this.userProject.project.surveyLayout)
      .subscribe((surveyLayout: SurveyLayout) => {
        this.surveyLayout = surveyLayout;
      });
  }

  setupPage() {
    if (defined(this.userProject) && this.userProject.complete) {
      this.router.navigateByUrl('/dashboard');
    } else if (defined(this.userProject) &&
      this.currentStepIndex < this.surveyLayout.steps.length) {
      this.finalized = false;
      this.setupPageNavigation();
      this.setupPageContent();
    } else if (defined(this.userProject) &&
      this.currentStepIndex === this.surveyLayout.steps.length) {
      this.finalized = true;
    }
  }

  subscribeToRouteChange() {
    this.routeParams$ = this.activatedRoute.params
      .subscribe((params: { projectId: string }) => {
        this.setupPage();
      }, e => { console.log(e); });
  }

  subscribeToQueryChange() {
    this.routeQueries$ = this.activatedRoute.queryParams
      .subscribe((queryParams: { step?: string }) => {
        this.currentStepIndex = +queryParams.step - 1;
        this.setupPage();
      });
  }

  setupPageContent() {
    const step = this.surveyLayout.steps[this.currentStepIndex];
    if (step.refModel === SurveyLayoutModelType.SURVEY_ITEM) {
      this.headingText = 'Introduction';
    } else {
      this.surveyLayout.getQuestionDelegate(step).subscribe((v: any) => {
        if (v.hasOwnProperty('question')) {
          this.headingText = v.question;
        } else if (v.hasOwnProperty('text')) {
          this.headingText = v.text;
        }
      });
    }
  }

  setupPageNavigation() {
    const stepRefModel = this.surveyLayout.steps[this.currentStepIndex].refModel;
    const questionIndex = this.getQuestionIndex();
    const answer = this.userProject.answers[questionIndex];
    const isValidAnswer = defined(answer) && answer.answer !== '';
    const isQuestion = stepRefModel === SurveyLayoutModelType.MULTIPLE_CHOICE
      || stepRefModel === SurveyLayoutModelType.SCALE_QUESTION
      || stepRefModel === SurveyLayoutModelType.QUESTION;

    if (this.currentStepIndex < this.surveyLayout.steps.length) {
      this.nextNavLink = [
        '/feedback',
        this.userProject.project._id,
        this.currentStepIndex + 1
      ];
      this.isPrevNavLinkValid = true;
    } else if (this.currentStepIndex === this.surveyLayout.steps.length ||
      isQuestion && !isValidAnswer) {
      this.isNextNavLinkValid = false;
    }

    if (this.currentStepIndex > 0) {
      this.prevNavLink = [
        '/feedback',
        this.userProject.project._id,
        this.currentStepIndex - 1
      ];
      this.isPrevNavLinkValid = true;
    } else {
      this.isNextNavLinkValid = false;
    }

  }

  getQuestionIndex(): number {
    const stepRefModel = this.surveyLayout.steps[this.currentStepIndex].refModel;
    let questionIndex = 0;
    for (let i = 0; i < this.surveyLayout.steps.length; i++) {
      const _stepRefModel = this.surveyLayout.steps[i].refModel;
      if (_stepRefModel !== stepRefModel &&
        _stepRefModel === SurveyLayoutModelType.MULTIPLE_CHOICE
        || _stepRefModel === SurveyLayoutModelType.SCALE_QUESTION
        || _stepRefModel === SurveyLayoutModelType.QUESTION) {
        questionIndex++;
      } else if (_stepRefModel === stepRefModel) {
        break;
      }
    }
    return questionIndex + 1;
  }

  ngOnDestroy() {

  }


}
